// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: member.sql

package db

import (
	"context"
	"database/sql"
)

const createMember = `-- name: CreateMember :execresult
INSERT INTO member (id, name, event_id) VALUES (?, ?, ?)
`

type CreateMemberParams struct {
	ID      string
	Name    string
	EventID string
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createMember, arg.ID, arg.Name, arg.EventID)
}

const listMembersByEventID = `-- name: ListMembersByEventID :many
SELECT id, name, event_id FROM member WHERE event_id = ?
`

func (q *Queries) ListMembersByEventID(ctx context.Context, eventID string) ([]Member, error) {
	rows, err := q.db.QueryContext(ctx, listMembersByEventID, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Member
	for rows.Next() {
		var i Member
		if err := rows.Scan(&i.ID, &i.Name, &i.EventID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
